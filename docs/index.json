[
{
	"uri": "/galaxy-setup/launch-galaxy-instance/",
	"title": "Launch Galaxy Instance",
	"tags": [],
	"description": "",
	"content": "Docker Galaxy The Docker Galaxy image created by Björn Grüning is probably the mostly widely used Docker image for Galaxy. It has over 10k+ pulls from Docker hub. We are going to use this image to launch a Galaxy instance. Before we launch a Docker container, we need to get Docker installed. Instructions on Docker installation can be found on the offical Docker website.\nLaunch a Galaxy instance: docker run -i -t --rm \\ -p 80:80 -p 8021:21 -p 8022:22 \\ -e \u0026quot;ENABLE_TTS_INSTALL=True\u0026quot; \\ -e \u0026quot;GALAXY_CONFIG_ADMIN_USERS=example@gmail.com\u0026quot; \\ bgruening/galaxy-stable:17.01 /bin/bash  Command line arguments explanation:  -t: run docker container interactively. This will keep STDIN open even if not attached. -p: mapping the container’s ports to the host machines port. A nginx web server is running on port 80. Ports 21 and 22 are for FTP and SFTP protocols, respectively. We map these ports to a host port, so that we can interact with servers within the container through our host machine. -e \u0026quot;ENABLE_TTS_INSTALL=True\u0026quot;: enables tool installation from test tool shed. By default, only tool shed is available for Galaxy tool installation. -e \u0026quot;GALAXY_CONFIG_ADMIN_USERS=example@gmail.com\u0026quot;: register the email example@gmail.com as an admin user email. The user registered with this email will have admin permission on the Galaxy instance.   Start Galaxy So far, we have lunched a Docker container which has Galaxy installed. But we haven’t started Galaxy yet. We have logged into the Container as root user.\nMings-MacBook-Pro:~ mingchen$ docker run -i -t --rm \\ \u0026gt; -p 80:80 -p 8021:21 -p 8022:22 \\ \u0026gt; -e \u0026quot;ENABLE_TTS_INSTALL=True\u0026quot; \\ \u0026gt; -e \u0026quot;GALAXY_CONFIG_ADMIN_USERS=example@gmail.com\u0026quot; \\ \u0026gt; bgruening/galaxy-stable:17.01 /bin/bash root@fd2d0f70a407:/galaxy-central To start Galaxy, just run the command below within the container:\nstartup Once the starting process completes, you should see the Galaxy logs on your screen:\n==\u0026gt; /home/galaxy/logs/uwsgi.log \u0026lt;== galaxy.webapps.galaxy.buildapp DEBUG 2017-12-07 03:27:15,199 Enabling \u0026#39;Batch\u0026#39; middleware galaxy.webapps.galaxy.buildapp DEBUG 2017-12-07 03:27:15,199 Prior to webapp return, Galaxy thread \u0026lt;_MainThread(MainThread, started 140164177794880)\u0026gt; is alive. Thu Dec 7 03:27:15 2017 - WSGI app 0 (mountpoint=\u0026#39;\u0026#39;) ready in 20 seconds on interpreter 0x17cbc60 pid: 173 (default app) Thu Dec 7 03:27:15 2017 - *** uWSGI is running in multiple interpreter mode *** Thu Dec 7 03:27:15 2017 - spawned uWSGI master process (pid: 173) Thu Dec 7 03:27:15 2017 - spawned uWSGI worker 1 (pid: 293, cores: 4) Thu Dec 7 03:27:15 2017 - spawned uWSGI worker 2 (pid: 296, cores: 4) Thu Dec 7 03:27:15 2017 - *** Stats server enabled on 127.0.0.1:9191 fd: 12 *** galaxy.queue_worker INFO 2017-12-07 03:27:15,206 Binding and starting galaxy control worker for main.1 galaxy.queue_worker INFO 2017-12-07 03:27:15,231 Binding and starting galaxy control worker for main.2 tail: unrecognized file system type 0x794c7630 for ‘/home/galaxy/logs/uwsgi.log’. please report this to bug-coreutils@gnu.org. reverting to polling Press Ctrl+C to back to your container.\n Access Galaxy A running Galaxy should be available at http://127.0.0.1.\n  "
},
{
	"uri": "/galaxy-setup/install-galaxy-tools/",
	"title": "Install Galaxy Tools",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/galaxy-setup/build-galaxy-workflows/",
	"title": "Build Galaxy Workflows",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/galaxy-setup/",
	"title": "Galaxy Setup",
	"tags": [],
	"description": "",
	"content": "Galaxy Setup Overview  Launch Galaxy Instance Install Galaxy Tools Build Galaxy Workflows    "
},
{
	"uri": "/",
	"title": "Galaxy, Tripal and Computational Analysis",
	"tags": [],
	"description": "",
	"content": "Galaxy, Tripal and Computational Analysis Galaxy is an open, web-based platform for reproducible computational analysis. Tripal Galaxy is a Tripal module that allows Tripal site users to interact with Galaxy from within a Tripal site.\n "
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tripal/",
	"title": "Triapl",
	"tags": [],
	"description": "",
	"content": "R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.\nWhen you click the Knit button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\nsummary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.:19.0 3rd Qu.: 56.00 ## Max. :25.0 Max. :120.00  Including Plots You can also embed plots, for example:\nNote that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot.\n "
}]